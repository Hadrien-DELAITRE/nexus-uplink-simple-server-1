"use strict";

var _classProps = function (child, staticProps, instanceProps) {
  if (staticProps) Object.defineProperties(child, staticProps);
  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

require("6to5/polyfill");
var Promise = require("bluebird");
var io = require("socket.io");
var _ = require("lodash");
var co = require("co");
var EventEmitter = require("events").EventEmitter;
var bodyParser = require("body-parser");
var ConstantRouter = require("nexus-router").ConstantRouter;

var Connection = require("./Connection");
var Session = require("./Session");
var HTTPError = require("./HTTPError");

var UplinkSimpleServer = (function () {
  var UplinkSimpleServer = function UplinkSimpleServer(_ref) {
    var pid = _ref.pid;
    var stores = _ref.stores;
    var rooms = _ref.rooms;
    var actions = _ref.actions;
    _.dev(function () {
      return stores.should.be.an.Array && rooms.should.be.an.Array && actions.should.be.an.Array;
    });
    this.stores = new ConstantRouter(stores);
    this.rooms = new ConstantRouter(rooms);
    this.actions = new ConstantRouter(actions);
    this._data = {};
  };

  _classProps(UplinkSimpleServer, null, {
    pull: {
      writable: true,
      value: function (path) {
        if (this.stores.match(path) !== null) {}
      }
    },
    subscribeTo: {
      writable: true,
      value: function (path, update) {}
    },
    unsubscribeFrom: {
      writable: true,
      value: function (subscription) {}
    },
    listenTo: {
      writable: true,
      value: function (room, emit) {}
    },
    unlistenTo: {
      writable: true,
      value: function (listener) {}
    },
    dispatch: {
      writable: true,
      value: function (action, params) {}
    }
  });

  return UplinkSimpleServer;
})();
//# sourceMappingURL=data:application/json;base64,